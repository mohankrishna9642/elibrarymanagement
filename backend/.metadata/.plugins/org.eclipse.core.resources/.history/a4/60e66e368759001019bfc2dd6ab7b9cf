package com.elibrary.borrowingservice.config;

import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.config.Customizer;
import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
import org.springframework.util.StringUtils;
// CORS Imports
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;
import org.springframework.web.filter.CorsFilter;
import org.springframework.web.filter.OncePerRequestFilter;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;


@Configuration
@EnableWebSecurity
@EnableMethodSecurity
public class SecurityConfig {

    private static final Logger logger = LoggerFactory.getLogger(SecurityConfig.class);

    @Bean
    public CorsFilter corsFilter() {
        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
        CorsConfiguration config = new CorsConfiguration();
        config.setAllowCredentials(true);
        config.addAllowedOrigin("http://localhost:3000"); // Frontend
        config.addAllowedOrigin("http://localhost:8080"); // Gateway
        config.addAllowedOrigin("http://localhost:8083"); // Borrowing Service itself (for Swagger UI)
        config.addAllowedHeader("*");
        config.addAllowedMethod("*");
        source.registerCorsConfiguration("/**", config);
        return new CorsFilter(source);
    }

    @Bean
    public OncePerRequestFilter gatewayHeaderAuthFilter() {
        return new OncePerRequestFilter() {
            @Override
            protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
                    throws ServletException, IOException {
                String userId = request.getHeader("X-User-ID");
                String userEmail = request.getHeader("X-User-Email");
                String userRoles = request.getHeader("X-User-Roles");

                // --- CRITICAL FIX: Use explicit string concatenation for logger.debug calls ---
                logger.debug("BorrowService: Incoming Request URI: " + request.getRequestURI());
                logger.debug("BorrowService: Headers from Gateway: X-User-ID=[" + userId + "], X-User-Email=[" + userEmail + "], X-User-Roles=[" + userRoles + "]");

                if (StringUtils.hasText(userId) && StringUtils.hasText(userEmail) && StringUtils.hasText(userRoles)) {
                    List<SimpleGrantedAuthority> authorities = Arrays.stream(userRoles.split(","))
                            .map(SimpleGrantedAuthority::new)
                            .collect(Collectors.toList());

                    User principal = new User(userEmail, "", authorities);
                    // Pass the raw userId string as details for later retrieval in service layer
                    UsernamePasswordAuthenticationToken authentication =
                            new UsernamePasswordAuthenticationToken(principal, null, authorities);
                    authentication.setDetails(userId); // Store userId in details

                    logger.debug("BorrowService: Authentication set in SecurityContextHolder for user: " + userEmail + " with roles: " + userRoles);
                } else {
                    logger.debug("BorrowService: X-User headers not found or empty. Request remains anonymous. URI: " + request.getRequestURI());
                }

                filterChain.doFilter(request, response);
            }
        };
    }

    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        http
            .csrf(csrf -> csrf.disable())
            .cors(Customizer.withDefaults())
            .sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
            .authorizeHttpRequests(authorize -> authorize
                // Public endpoints for Swagger/Actuator
                .requestMatchers(
                    "/api/borrows/swagger-ui.html", "/api/borrows/swagger-ui/**", "/api/borrows/v3/api-docs/**",
                    "/actuator/**","/api/borrows/public-status"
                ).permitAll()
                // All other requests require authentication
                .anyRequest().authenticated()
            );

        http.addFilterBefore(gatewayHeaderAuthFilter(), UsernamePasswordAuthenticationFilter.class);

        return http.build();
    }
}