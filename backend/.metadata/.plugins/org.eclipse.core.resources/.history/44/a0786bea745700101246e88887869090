package com.elibrary.authservice.config;

import com.elibrary.authservice.entity.Role;
import com.elibrary.authservice.entity.User;
import com.elibrary.authservice.repository.UserRepository;
import com.elibrary.authservice.repository.RoleRepository;
import com.elibrary.authservice.security.jwt.AuthEntryPointJwt;
import com.elibrary.authservice.security.jwt.AuthTokenFilter;
import com.elibrary.authservice.security.services.UserDetailsServiceImpl;
import org.springframework.boot.CommandLineRunner;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

import java.time.LocalDateTime;
import java.util.HashSet;
import java.util.Set;

@Configuration
@EnableWebSecurity
@EnableMethodSecurity(prePostEnabled = true) // Enable @PreAuthorize
public class SecurityConfig {

    private final UserDetailsServiceImpl userDetailsService;
    private final AuthEntryPointJwt unauthorizedHandler;
    private final UserRepository userRepository;
    private final RoleRepository roleRepository;

    public SecurityConfig(UserDetailsServiceImpl userDetailsService, AuthEntryPointJwt unauthorizedHandler,
                          UserRepository userRepository, RoleRepository roleRepository) {
        this.userDetailsService = userDetailsService;
        this.unauthorizedHandler = unauthorizedHandler;
        this.userRepository = userRepository;
        this.roleRepository = roleRepository;
    }

    @Bean
    public AuthTokenFilter authenticationJwtTokenFilter() {
        return new AuthTokenFilter();
    }

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }

    @Bean
    public DaoAuthenticationProvider authenticationProvider() {
        DaoAuthenticationProvider authProvider = new DaoAuthenticationProvider();
        authProvider.setUserDetailsService(userDetailsService);
        authProvider.setPasswordEncoder(passwordEncoder());
        return authProvider;
    }

    @Bean
    public AuthenticationManager authenticationManager(AuthenticationConfiguration authConfig) throws Exception {
        return authConfig.getAuthenticationManager();
    }

    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        http
            .csrf(csrf -> csrf.disable()) // Disable CSRF for stateless API
            .exceptionHandling(exception -> exception.authenticationEntryPoint(unauthorizedHandler))
            .sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS)) // No sessions
            .authorizeHttpRequests(authorize -> authorize
                // PUBLIC ENDPOINTS
                .requestMatchers("/api/auth/**").permitAll() // Login, Register endpoints
                .requestMatchers("/swagger-ui.html", "/swagger-ui/**", "/v3/api-docs/**").permitAll() // Swagger UI and docs
                .requestMatchers("/actuator/**").permitAll() // Actuator endpoints for monitoring

                // Admin endpoints. While `@PreAuthorize` handles roles, we need to allow the path for authentication processing.
                // This is crucial: if not explicitly permitted or authenticated(), it falls through to .anyRequest().authenticated()
                .requestMatchers("/api/users/admin/**").hasRole("ADMIN") // Only ADMINs can access these paths initially
                                                                        // This will implicitly trigger JWT validation for these paths.
                // ALL OTHER REQUESTS require authentication
                .anyRequest().authenticated()
            );

        http.authenticationProvider(authenticationProvider());
        http.addFilterBefore(authenticationJwtTokenFilter(), UsernamePasswordAuthenticationFilter.class);

        return http.build();
    }

    // CommandLineRunner for initial data (remains the same)
    @Bean
    public CommandLineRunner initData(UserRepository userRepository, RoleRepository roleRepository, PasswordEncoder passwordEncoder) {
        return args -> {
            if (roleRepository.findByName(Role.RoleName.ROLE_USER).isEmpty()) {
                roleRepository.save(new Role(null, Role.RoleName.ROLE_USER));
            }
            if (roleRepository.findByName(Role.RoleName.ROLE_ADMIN).isEmpty()) {
                roleRepository.save(new Role(null, Role.RoleName.ROLE_ADMIN));
            }

            if (userRepository.findByEmail("admin@elibrary.com").isEmpty()) {
                Role adminRole = roleRepository.findByName(Role.RoleName.ROLE_ADMIN)
                        .orElseThrow(() -> new RuntimeException("Admin Role not found."));
                Set<Role> adminRoles = new HashSet<>();
                adminRoles.add(adminRole);

                User adminUser = new User();
                adminUser.setEmail("admin@elibrary.com");
                adminUser.setPassword(passwordEncoder.encode("adminpass"));
                adminUser.setName("Admin User");
                adminUser.setRegistrationDate(LocalDateTime.now());
                adminUser.setAccountNonLocked(true);
                adminUser.setRoles(adminRoles);
                userRepository.save(adminUser);
                System.out.println("Default Admin user created: admin@elibrary.com / adminpass");
            }
        };
    }
}