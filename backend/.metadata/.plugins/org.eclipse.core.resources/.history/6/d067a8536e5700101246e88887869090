package com.elibrary.authservice.controller;

import com.elibrary.authservice.dto.UserResponse;
import com.elibrary.authservice.dto.UserUpdateRequest;
import com.elibrary.authservice.service.UserService;
import jakarta.validation.Valid;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/users")
public class UserController {

    private final UserService userService;

    public UserController(UserService userService) {
        this.userService = userService;
    }

    @GetMapping("/profile")
    @PreAuthorize("isAuthenticated()") // User must be authenticated
    public ResponseEntity<UserResponse> getUserProfile() {
        // Get authenticated user's email from SecurityContext
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        String userEmail = authentication.getName(); // This will be the email

        UserResponse userProfile = userService.getUserProfile(userEmail);
        return ResponseEntity.ok(userProfile);
    }

    @PutMapping("/profile")
    @PreAuthorize("isAuthenticated()") // User must be authenticated
    public ResponseEntity<UserResponse> updateProfile(@Valid @RequestBody UserUpdateRequest request) {
        // Get authenticated user's email from SecurityContext
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        String userEmail = authentication.getName(); // This will be the email

        UserResponse updatedUser = userService.updateProfile(userEmail, request);
        return ResponseEntity.ok(updatedUser);
    }

    // Admin endpoints
    @GetMapping("/admin/all")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<Page<UserResponse>> getAllUsers(
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "10") int size) {
        Pageable pageable = PageRequest.of(page, size);
        Page<UserResponse> users = userService.getAllUsers(pageable);
        return ResponseEntity.ok(users);
    }

    @PutMapping("/admin/{userId}/restrict")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<String> restrictUser(@PathVariable Long userId) {
        userService.restrictUser(userId);
        return ResponseEntity.ok("User with ID " + userId + " has been restricted.");
    }

    @PutMapping("/admin/{userId}/activate")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<String> activateUser(@PathVariable Long userId) {
        userService.activateUser(userId);
        return ResponseEntity.ok("User with ID " + userId + " has been activated.");
    }

    @GetMapping("/profile-by-id/{userId}")
    @PreAuthorize("hasRole('ADMIN')") // Securing this endpoint for internal admin-like calls
    public ResponseEntity<UserResponse> getUserProfileById(@PathVariable Long userId) {
        UserResponse userProfile = userService.getUserById(userId);
        return ResponseEntity.ok(userProfile);
    }
}