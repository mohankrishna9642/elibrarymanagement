server.port=8080
spring.application.name=e-library-gateway

eureka.client.service-url.defaultZone=http://localhost:8761/eureka/
eureka.instance.prefer-ip-address=true

spring.cloud.gateway.routes:
  # Existing Auth Service API Route
  - id: auth-service
    uri: lb://AUTH-SERVICE
    predicates:
      - Path=/api/auth/**,/api/users/**

  # Existing Book Service API Route
  - id: book-service
    uri: lb://BOOK-SERVICE
    predicates:
      - Path=/api/books/**

  # Existing Book Service Files Route
  - id: book-service-files
    uri: lb://BOOK-SERVICE
    predicates:
      - Path=/books/**

  # Existing Borrowing Service API Route
  - id: borrowing-service
    uri: lb://BORROWING-SERVICE
    predicates:
      - Path=/api/borrows/**

  # --- NEW: Routes for Swagger UI and API Docs for each Microservice ---
  # These routes are critical for the Gateway to properly proxy Swagger UI assets.

  # Auth Service Swagger UI & API Docs
  - id: auth-service-swagger-ui
    uri: lb://AUTH-SERVICE
    predicates:
      - Path=/api/auth/swagger-ui/**
      - Path=/api/auth/v3/api-docs/**
    filters:
      # This filter removes the /api/auth prefix before sending to the Auth Service,
      # as Auth Service's internal swagger-ui typically expects /swagger-ui/**.
      - RewritePath=/api/auth/(?<segment>.*), /${segment}

  # Book Service Swagger UI & API Docs
  - id: book-service-swagger-ui
    uri: lb://BOOK-SERVICE
    predicates:
      - Path=/api/books/swagger-ui/**
      - Path=/api/books/v3/api-docs/**
    filters:
      # This filter removes the /api/books prefix before sending to the Book Service.
      - RewritePath=/api/books/(?<segment>.*), /${segment}

  # Borrowing Service Swagger UI & API Docs
  - id: borrowing-service-swagger-ui
    uri: lb://BORROWING-SERVICE
    predicates:
      - Path=/api/borrows/swagger-ui/**
      - Path=/api/borrows/v3/api-docs/**
    filters:
      # This filter removes the /api/borrows prefix before sending to the Borrowing Service.
      - RewritePath=/api/borrows/(?<segment>.*), /${segment}

# JWT Secret (MUST MATCH Auth Service's jwt.secret)
jwt.secret=ThisIsAReallyStrongSecretKeyForYourJWTAuthenticationWhichNeedsToBeAtLeast32BytesLong

spring.cloud.gateway.globalcors.corsConfigurations."/api/**".allowedOrigins=http://localhost:3000
spring.cloud.gateway.globalcors.corsConfigurations."/api/**".allowedMethods=GET,POST,PUT,DELETE,OPTIONS
spring.cloud.gateway.globalcors.corsConfigurations."/api/**".allowedHeaders=*
spring.cloud.gateway.globalcors.corsConfigurations."/api/**".allowCredentials=true

logging.level.org.springframework.security=DEBUG
logging.level.org.springframework.web=DEBUG
logging.level.org.springframework.cloud.gateway=DEBUG

# --- NEW: Springdoc Configuration for Gateway's Centralized Swagger UI ---
# This enables the http://localhost:8080/swagger-ui.html endpoint
# and tells it where to find the API definitions for each service.
springdoc:
  swagger-ui:
    # This is the path for the Gateway's main aggregated Swagger UI.
    path: /swagger-ui.html
    urls:
      # Each entry here tells the Gateway's Swagger UI where to find the
      # OpenAPI JSON specification for each microservice, accessed via the Gateway's own routes.
      - name: Auth Service
        url: /api/auth/v3/api-docs
      - name: Book Service
        url: /api/books/v3/api-docs
      - name: Borrowing Service
        url: /api/borrows/v3/api-docs
  api-docs:
    path: /v3/api-docs # The Gateway's own aggregated API docs endpoint (usually not directly used by user)