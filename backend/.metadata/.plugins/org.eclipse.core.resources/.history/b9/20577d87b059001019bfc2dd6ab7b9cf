package com.elibrary.authservice.controller;

import com.elibrary.authservice.dto.UserResponse;
import com.elibrary.authservice.dto.UserUpdateRequest;
import com.elibrary.authservice.service.UserService;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import jakarta.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.List;

@RestController
@RequestMapping("/api/users")
public class UserController {

    private static final Logger logger = LoggerFactory.getLogger(UserController.class);

    private final UserService userService;

    public UserController(UserService userService) {
        this.userService = userService;
    }

    @GetMapping("/profile")
    @PreAuthorize("isAuthenticated()")
    public ResponseEntity<UserResponse> getUserProfile() {
        logger.debug("UserController: Received request for authenticated user profile.");
        UserResponse userProfile = userService.getUserProfile();
        return ResponseEntity.ok(userProfile);
    }
    
    // New endpoint for Feign Client lookup by ID (for Borrowing Service)
    @GetMapping("/profile-by-id/{id}")
    // Permit access only for authenticated internal services (like Borrowing Service)
    // You might refine this to hasRole('SERVICE_ACCOUNT') if you have one,
    // but for now, authenticated() is broad enough for internal calls via Gateway's forwarded JWT.
    @PreAuthorize("isAuthenticated()") 
    public ResponseEntity<UserResponse> getUserProfileById(@PathVariable Long id) {
        logger.debug("UserController: Received request for user profile by ID: {}", id);
        try {
            UserResponse userProfile = userService.getUserProfileById(id);
            return ResponseEntity.ok(userProfile);
        } catch (com.elibrary.authservice.exception.ResourceNotFoundException e) {
            logger.error("UserController: User not found with ID: {}", id);
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
    }


    @GetMapping("/admin/all")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<Page<UserResponse>> getAllUsers(
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "10") int size) {
        logger.debug("UserController: Received request for all users (admin view). Page: {}, Size: {}", page, size);
        Pageable pageable = PageRequest.of(page, size);
        Page<UserResponse> usersPage = userService.getAllUsers(pageable);
        return ResponseEntity.ok(usersPage);
    }

    @PutMapping("/admin/{id}/status") // Example endpoint to update user status by admin
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<UserResponse> updateUserAccountStatus(@PathVariable Long id, @RequestParam Boolean accountNonLocked) {
        logger.debug("UserController: Admin updating status for user ID {} to {}", id, accountNonLocked);
        try {
            UserResponse updatedUser = userService.updateUserAccountStatus(id, accountNonLocked);
            return ResponseEntity.ok(updatedUser);
        } catch (com.elibrary.authservice.exception.ResourceNotFoundException e) {
            logger.error("UserController: User not found for status update: {}", id);
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        } catch (Exception e) {
            logger.error("UserController: Error updating user status for ID {}: {}", id, e.getMessage(), e);
            return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }
    
    // Admin can update other user profile details
    @PutMapping("/admin/{id}")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<UserResponse> updateUserProfileByAdmin(@PathVariable Long id, @Valid @RequestBody UserUpdateRequest userUpdateRequest) {
        logger.debug("UserController: Admin updating profile for user ID: {}", id);
        try {
            UserResponse updatedUser = userService.updateUserProfileByAdmin(id, userUpdateRequest);
            return ResponseEntity.ok(updatedUser);
        } catch (com.elibrary.authservice.exception.ResourceNotFoundException e) {
            logger.error("UserController: User not found for admin update: {}", id);
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        } catch (Exception e) {
            logger.error("UserController: Error updating user profile for ID {}: {}", id, e.getMessage(), e);
            return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }
}