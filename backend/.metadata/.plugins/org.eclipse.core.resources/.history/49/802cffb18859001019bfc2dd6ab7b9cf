package com.elibrary.borrowingservice.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager; // Import this
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration; // Import this
import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
import org.springframework.web.filter.OncePerRequestFilter;
import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.User;
import org.springframework.util.StringUtils;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

// CORS Imports
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;
import org.springframework.web.filter.CorsFilter;
import org.springframework.security.config.Customizer;


@Configuration
@EnableWebSecurity
@EnableMethodSecurity(prePostEnabled = true)
public class SecurityConfig {

    private static final Logger logger = LoggerFactory.getLogger(SecurityConfig.class);

    // Inject AuthenticationManager
    // Spring Boot 2.7+ / Spring Security 5.x+:
    // @Bean public AuthenticationManager authenticationManager(AuthenticationConfiguration authenticationConfiguration) throws Exception {
    //     return authenticationConfiguration.getAuthenticationManager();
    // }
    // For Spring Boot 3.x+ / Spring Security 6.x+: Autowire is usually sufficient, or define explicitly if needed for custom provider.
    // Let's assume you'll autowire for simplicity in this filter, if you don't have other custom providers

    @Bean
    public CorsFilter corsFilter() {
        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
        CorsConfiguration config = new CorsConfiguration();
        config.setAllowCredentials(true);
        config.addAllowedOrigin("http://localhost:3000"); // Frontend
        config.addAllowedOrigin("http://localhost:8080"); // Gateway
        config.addAllowedOrigin("http://localhost:8083"); // Borrowing Service itself (for Swagger UI)
        config.addAllowedHeader("*");
        config.addAllowedMethod("*");
        source.registerCorsConfiguration("/**", config);
        return new CorsFilter(source);
    }

    // Pass the AuthenticationManager to the filter
    @Bean
    public OncePerRequestFilter gatewayHeaderAuthFilter(AuthenticationManager authenticationManager) { // <-- MODIFIED: Inject AuthenticationManager
        return new OncePerRequestFilter() {
            @Override
            protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
                    throws ServletException, IOException {
                String userId = request.getHeader("X-User-ID");
                String userEmail = request.getHeader("X-User-Email");
                String userRoles = request.getHeader("X-User-Roles");

                logger.debug("BorrowService: Incoming Request URI: {}", request.getRequestURI());
                logger.debug("BorrowService: Headers from Gateway: X-User-ID=[{}], X-User-Email=[{}], X-User-Roles=[{}]", userId, userEmail, userRoles);

                if (StringUtils.hasText(userId) && StringUtils.hasText(userEmail) && StringUtils.hasText(userRoles)) {
                    List<SimpleGrantedAuthority> authorities = Arrays.stream(userRoles.split(","))
                            .map(SimpleGrantedAuthority::new)
                            .collect(Collectors.toList());

                    User principal = new User(userEmail, "", authorities);
                    UsernamePasswordAuthenticationToken authenticationToken =
                            new UsernamePasswordAuthenticationToken(principal, null, authorities);
                    authenticationToken.setDetails(userId); // Store userId in details

                    // *** CRITICAL CHANGE: Use the AuthenticationManager to authenticate the token ***
                    try {
                        // The AuthenticationManager, by default, will have a DaoAuthenticationProvider
                        // which can handle UsernamePasswordAuthenticationToken.
                        // By calling authenticate, it processes the token through the chain,
                        // and if successful, sets it correctly in SecurityContextHolder.
                        authenticationManager.authenticate(authenticationToken);
                        SecurityContextHolder.getContext().setAuthentication(authenticationToken); // Re-set after manager authenticates (might be redundant but safe)
                        logger.debug("BorrowService: Authentication set in SecurityContextHolder for user: {} with roles: {}", userEmail, userRoles);
                    } catch (Exception e) {
                        logger.debug("BorrowService: Authentication failed for X-User headers. Request remains anonymous. Error: {}", e.getMessage());
                        SecurityContextHolder.clearContext(); // Clear context on authentication failure
                    }

                } else {
                    logger.debug("BorrowService: X-User headers not found or empty. Request remains anonymous. URI: {}", request.getRequestURI());
                }

                filterChain.doFilter(request, response);
            }
        };
    }

    // You need to explicitly expose the AuthenticationManager bean for Spring Security 6+
    // if it's not automatically available for injection in your custom filter.
    @Bean
    public AuthenticationManager authenticationManager(AuthenticationConfiguration authenticationConfiguration) throws Exception {
        return authenticationConfiguration.getAuthenticationManager();
    }


    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        http
            .csrf(csrf -> csrf.disable())
            .cors(Customizer.withDefaults())
            .sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
            .authorizeHttpRequests(authorize -> authorize
                // Public endpoints for Swagger/Actuator
                .requestMatchers(
                    "/api/borrows/swagger-ui.html", "/api/borrows/swagger-ui/**", "/api/borrows/v3/api-docs/**",
                    "/actuator/**"
                ).permitAll()
                // All other requests require authentication
                .anyRequest().authenticated()
            );

        // Add your custom filter BEFORE Spring Security's standard authentication filter
        http.addFilterBefore(gatewayHeaderAuthFilter(authenticationManager(http.getSharedObject(AuthenticationConfiguration.class))), UsernamePasswordAuthenticationFilter.class);

        return http.build();
    }
}