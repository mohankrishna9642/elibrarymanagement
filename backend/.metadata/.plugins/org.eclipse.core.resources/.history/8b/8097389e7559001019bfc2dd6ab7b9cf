server.port=8080
spring.application.name=e-library-gateway

eureka.client.service-url.defaultZone=http://localhost:8761/eureka/
eureka.instance.prefer-ip-address=true
spring.cloud.gateway.routes[3].id=borrowing-service # Use the next available index, e.g., [3]
spring.cloud.gateway.routes[3].uri=lb://BORROWING-SERVICE # This MUST match spring.application.name (uppercase) in e-library-borrowing-service
spring.cloud.gateway.routes[3].predicates[0]=Path=/api/borrows/** # This is the API path for Borrowing Service
# Existing Auth Service Route
spring.cloud.gateway.routes[0].id=auth-service
spring.cloud.gateway.routes[0].uri=lb://AUTH-SERVICE
spring.cloud.gateway.routes[0].predicates[0]=Path=/api/auth/**,/api/users/**

# ADDED: Book Service Route
spring.cloud.gateway.routes[1].id=book-service
spring.cloud.gateway.routes[1].uri=lb://BOOK-SERVICE
spring.cloud.gateway.routes[1].predicates[0]=Path=/api/books/**
# CRITICAL FIX: NEW ROUTE for serving static book files directly (e.g., /books/UUID.pdf)
# This routes direct /books/ requests to the Book Service.
spring.cloud.gateway.routes[2].id=book-service-files # New ID
spring.cloud.gateway.routes[2].uri=lb://BOOK-SERVICE
spring.cloud.gateway.routes[2].predicates[0]=Path=/books/** # Matches /books/anything.pdf
# You might need a filter here if the Book Service expects the /api/books/ prefix
# but since WebConfig adds /books/**, it might be fine without prefixing.
# If BookService needs /api/books/books/UUID.pdf, you'd add:
# spring.cloud.gateway.routes[2].filters[0]=RewritePath=/books/(?<segment>.*), /api/books/books/${segment}
# However, let's try direct routing first since WebConfig maps /books/** to file:

# JWT Secret (MUST MATCH Auth Service's jwt.secret)


jwt.secret=ThisIsAReallyStrongSecretKeyForYourJWTAuthenticationWhichNeedsToBeAtLeast32BytesLong

spring.cloud.gateway.globalcors.corsConfigurations."/api/**".allowedOrigins=http://localhost:3000
spring.cloud.gateway.globalcors.corsConfigurations."/api/**".allowedMethods=GET,POST,PUT,DELETE,OPTIONS
spring.cloud.gateway.globalcors.corsConfigurations."/api/**".allowedHeaders=*
spring.cloud.gateway.globalcors.corsConfigurations."/api/**".allowCredentials=true

logging.level.org.springframework.security=DEBUG
logging.level.org.springframework.web=DEBUG
logging.level.org.springframework.cloud.gateway=DEBUG