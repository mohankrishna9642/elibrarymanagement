package com.elibrary.authservice.service;

import com.elibrary.authservice.dto.UserResponse;
import com.elibrary.authservice.dto.UserUpdateRequest;
import com.elibrary.authservice.entity.User;
import com.elibrary.authservice.exception.ResourceNotFoundException;
import com.elibrary.authservice.repository.UserRepository;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.List;
import java.util.Set; // CRITICAL: Ensure Set is imported
import java.util.stream.Collectors;

@Service
public class UserService {

    private static final Logger logger = LoggerFactory.getLogger(UserService.class);

    private final UserRepository userRepository;

    public UserService(UserRepository userRepository) {
        this.userRepository = userRepository;
    }

    public UserResponse getUserProfile() {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        String currentUserName = authentication.getName(); // This gets the email from UserDetailsImpl
        logger.debug("UserService: Fetching profile for user: {}", currentUserName);

        User user = userRepository.findByEmail(currentUserName)
                .orElseThrow(() -> {
                    logger.error("UserService: User profile not found for email: {}", currentUserName);
                    return new ResourceNotFoundException("User not found with email: " + currentUserName);
                });
        return convertToUserResponse(user);
    }

    public Page<UserResponse> getAllUsers(Pageable pageable) {
        logger.debug("UserService: Fetching all users. Page: {}, Size: {}", pageable.getPageNumber(), pageable.getPageSize());
        return userRepository.findAll(pageable).map(this::convertToUserResponse);
    }

    // New method to update account status by admin
    @Transactional
    public UserResponse updateUserAccountStatus(Long userId, Boolean accountNonLocked) {
        logger.debug("UserService: Updating account status for user ID {} to {}", userId, accountNonLocked);
        User user = userRepository.findById(userId)
                .orElseThrow(() -> {
                    logger.error("UserService: User not found with ID: {}", userId);
                    return new ResourceNotFoundException("User not found with ID: " + userId);
                });
        user.setAccountNonLocked(accountNonLocked); // Set the new status
        User updatedUser = userRepository.save(user);
        logger.info("UserService: User ID {} account status updated to {}", userId, accountNonLocked);
        return convertToUserResponse(updatedUser);
    }
    
    // Admin can update other user profile details
    @Transactional
    public UserResponse updateUserProfileByAdmin(Long userId, UserUpdateRequest userUpdateRequest) {
        logger.debug("UserService: Admin updating profile for user ID: {}", userId);
        User user = userRepository.findById(userId)
                .orElseThrow(() -> {
                    logger.error("UserService: User not found with ID: {}", userId);
                    return new ResourceNotFoundException("User not found with ID: " + userId);
                });
        
        user.setName(userUpdateRequest.getName());
        user.setPhoneNumber(userUpdateRequest.getPhoneNumber());
        user.setCity(userUpdateRequest.getCity());
        // CRITICAL: Ensure accountNonLocked is handled if UserUpdateRequest has it
        if (userUpdateRequest.getAccountNonLocked() != null) {
            user.setAccountNonLocked(userUpdateRequest.getAccountNonLocked());
            logger.debug("UserService: User ID {} accountNonLocked updated to {}", userId, userUpdateRequest.getAccountNonLocked());
        }

        User updatedUser = userRepository.save(user);
        logger.info("UserService: User profile updated by admin for ID: {}", userId);
        return convertToUserResponse(updatedUser);
    }
    
    // New method for Feign Client lookup by ID (for Borrowing Service)
    public UserResponse getUserProfileById(Long userId) {
        logger.debug("UserService: Fetching user profile by ID: {}", userId);
        User user = userRepository.findById(userId)
                .orElseThrow(() -> {
                    logger.error("UserService: User profile not found for ID: {}", userId);
                    return new ResourceNotFoundException("User not found with ID: " + userId);
                });
        return convertToUserResponse(user);
    }

    // CRITICAL FIX: Modified convertToUserResponse to collect roles to a Set<String>
    private UserResponse convertToUserResponse(User user) {
        UserResponse response = new UserResponse();
        response.setId(user.getId());
        response.setEmail(user.getEmail());
        response.setName(user.getName());
        response.setPhoneNumber(user.getPhoneNumber());
        response.setCity(user.getCity());
        response.setRegistrationDate(user.getRegistrationDate());
        response.setAccountNonLocked(user.isAccountNonLocked());
        // CRITICAL FIX: Collect to a Set if UserResponse.roles is declared as Set<String>
        response.setRoles(user.getRoles().stream().map(role -> role.getName().name()).collect(Collectors.toSet())); 
        return response;
    }
}